package com.fenboshi.fboshi.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fenboshi.fboshi.bean.ArticelBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICEL_BEAN".
*/
public class ArticelBeanDao extends AbstractDao<ArticelBean, Void> {

    public static final String TABLENAME = "ARTICEL_BEAN";

    /**
     * Properties of entity ArticelBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Auto = new Property(1, String.class, "auto", false, "AUTO");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property HeadImage = new Property(4, String.class, "HeadImage", false, "HEAD_IMAGE");
    }


    public ArticelBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ArticelBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICEL_BEAN\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"AUTO\" TEXT," + // 1: auto
                "\"TYPE\" TEXT," + // 2: type
                "\"CONTENT\" TEXT," + // 3: content
                "\"HEAD_IMAGE\" TEXT);"); // 4: HeadImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICEL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticelBean entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String auto = entity.getAuto();
        if (auto != null) {
            stmt.bindString(2, auto);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String HeadImage = entity.getHeadImage();
        if (HeadImage != null) {
            stmt.bindString(5, HeadImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticelBean entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String auto = entity.getAuto();
        if (auto != null) {
            stmt.bindString(2, auto);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String HeadImage = entity.getHeadImage();
        if (HeadImage != null) {
            stmt.bindString(5, HeadImage);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ArticelBean readEntity(Cursor cursor, int offset) {
        ArticelBean entity = new ArticelBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // auto
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // HeadImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticelBean entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAuto(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ArticelBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ArticelBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(ArticelBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
